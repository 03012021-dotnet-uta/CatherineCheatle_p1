// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

namespace Repository.Migrations
{
    [DbContext(typeof(PrintStoreContext))]
    [Migration("20210330204541_migrations3")]
    partial class migrations3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CustomerPasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("CustomerPasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerZip")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Models.Inventory", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("PrintId")
                        .HasColumnType("int");

                    b.Property<int>("PrintQty")
                        .HasColumnType("int");

                    b.HasKey("StoreId", "PrintId");

                    b.HasIndex("PrintId");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            PrintId = 1,
                            PrintQty = 200
                        },
                        new
                        {
                            StoreId = 1,
                            PrintId = 2,
                            PrintQty = 150
                        },
                        new
                        {
                            StoreId = 1,
                            PrintId = 3,
                            PrintQty = 100
                        },
                        new
                        {
                            StoreId = 1,
                            PrintId = 5,
                            PrintQty = 45
                        },
                        new
                        {
                            StoreId = 1,
                            PrintId = 6,
                            PrintQty = 16
                        },
                        new
                        {
                            StoreId = 2,
                            PrintId = 1,
                            PrintQty = 34
                        },
                        new
                        {
                            StoreId = 2,
                            PrintId = 2,
                            PrintQty = 122
                        },
                        new
                        {
                            StoreId = 2,
                            PrintId = 3,
                            PrintQty = 125
                        },
                        new
                        {
                            StoreId = 2,
                            PrintId = 4,
                            PrintQty = 12
                        },
                        new
                        {
                            StoreId = 2,
                            PrintId = 5,
                            PrintQty = 18
                        },
                        new
                        {
                            StoreId = 2,
                            PrintId = 6,
                            PrintQty = 46
                        },
                        new
                        {
                            StoreId = 3,
                            PrintId = 4,
                            PrintQty = 24
                        },
                        new
                        {
                            StoreId = 3,
                            PrintId = 5,
                            PrintQty = 56
                        },
                        new
                        {
                            StoreId = 3,
                            PrintId = 7,
                            PrintQty = 7
                        },
                        new
                        {
                            StoreId = 3,
                            PrintId = 8,
                            PrintQty = 49
                        });
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.Property<int>("OrdersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OrderSubtotal")
                        .HasColumnType("float");

                    b.Property<double>("OrderTax")
                        .HasColumnType("float");

                    b.Property<double>("OrderTotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("OrdersId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Models.Orderline", b =>
                {
                    b.Property<int>("OrderNumId")
                        .HasColumnType("int");

                    b.Property<int>("PrintId")
                        .HasColumnType("int");

                    b.Property<int>("PrintQty")
                        .HasColumnType("int");

                    b.HasKey("OrderNumId", "PrintId");

                    b.HasIndex("PrintId");

                    b.ToTable("Orderline");
                });

            modelBuilder.Entity("Models.Print", b =>
                {
                    b.Property<int>("PrintID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArtistFName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArtistLName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintDecription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PrintPrice")
                        .HasColumnType("float");

                    b.Property<string>("PrintTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrintID");

                    b.ToTable("Prints");

                    b.HasData(
                        new
                        {
                            PrintID = 1,
                            ArtistFName = "McGill Library",
                            PrintDecription = "A print of fantail birds. Look at them, how quaint.",
                            PrintImage = "img/mcgill-library-fantailwrens.jpg",
                            PrintPrice = 13.99,
                            PrintTitle = "Fantail Wrens"
                        },
                        new
                        {
                            PrintID = 2,
                            ArtistFName = "McGill Library",
                            PrintDecription = "A print of red fox. Look at him go.",
                            PrintImage = "img/mcgill-library-redfox.jpg",
                            PrintPrice = 13.99,
                            PrintTitle = "Red Fox"
                        },
                        new
                        {
                            PrintID = 3,
                            ArtistFName = "McGill Library",
                            PrintDecription = "A print of a brown hawk owl in a forest. I wonder what he sees.",
                            PrintImage = "img/mcgill-library-brownhawkowl.jpg",
                            PrintPrice = 13.99,
                            PrintTitle = "Brown Hawk Owl"
                        },
                        new
                        {
                            PrintID = 4,
                            ArtistFName = "Tamara",
                            ArtistLName = "Menzi",
                            PrintDecription = "A print of a place somewhere on a mountain side. Is that tree possibly the home of Tarzan?",
                            PrintImage = "img/tamara-menzi-tarzan.jpg",
                            PrintPrice = 17.989999999999998,
                            PrintTitle = "Tarzan's Home"
                        },
                        new
                        {
                            PrintID = 5,
                            ArtistFName = "Maris",
                            PrintDecription = "A print of girl picking flowers. How nice.",
                            PrintImage = "img/maris-agirlwithflowers.jpg",
                            PrintPrice = 29.989999999999998,
                            PrintTitle = "A Girl With Flowers"
                        },
                        new
                        {
                            PrintID = 6,
                            ArtistFName = "Jan",
                            ArtistLName = "Rombauer",
                            PrintDecription = "A print of man who appears to be very pleased with his drink...Cheers?",
                            PrintImage = "img/janrombauer-cheers.jpg",
                            PrintPrice = 23.989999999999998,
                            PrintTitle = "Cheers"
                        },
                        new
                        {
                            PrintID = 7,
                            ArtistFName = "Yuri_B",
                            PrintDecription = "A painting of knight overlooking the mountains at night.",
                            PrintImage = "img/yuri-b-knightatnight.jpg",
                            PrintPrice = 29.989999999999998,
                            PrintTitle = "Knight Night"
                        },
                        new
                        {
                            PrintID = 8,
                            ArtistFName = "Eberhard",
                            ArtistLName = "Grossgasteiger",
                            PrintDecription = "A painting of fantial birds. Look at them, how quaint.",
                            PrintImage = "img/eberhard-grossgasteiger-moonpink.jpg",
                            PrintPrice = 13.99,
                            PrintTitle = "White Clouds in Pink and Blue Clouds"
                        });
                });

            modelBuilder.Entity("Models.Store", b =>
                {
                    b.Property<int>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StoreCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreZip")
                        .HasColumnType("int");

                    b.HasKey("StoreID");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreID = 1,
                            StoreCity = "Durham",
                            StoreName = "Prints for Days",
                            StoreState = "NC",
                            StoreStreet = "123 Main Street",
                            StoreZip = 27704
                        },
                        new
                        {
                            StoreID = 2,
                            StoreCity = "Lincoln",
                            StoreName = "Pieces of History",
                            StoreState = "Nebraska",
                            StoreStreet = "1863 Gettysburg Street",
                            StoreZip = 68001
                        },
                        new
                        {
                            StoreID = 3,
                            StoreCity = "Colorado Springs",
                            StoreName = "Fantasy and Daydreams",
                            StoreState = "CO",
                            StoreStreet = "2336 Sage Lane",
                            StoreZip = 80951
                        });
                });

            modelBuilder.Entity("Models.Inventory", b =>
                {
                    b.HasOne("Models.Print", "Print")
                        .WithMany("Inventories")
                        .HasForeignKey("PrintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Store", "Store")
                        .WithMany("Inventories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Print");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.HasOne("Models.Customer", "customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Models.Orderline", b =>
                {
                    b.HasOne("Models.Order", "Order")
                        .WithMany("Orderlines")
                        .HasForeignKey("OrderNumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Print", "Print")
                        .WithMany("Orderlines")
                        .HasForeignKey("PrintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Print");
                });

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.Navigation("Orderlines");
                });

            modelBuilder.Entity("Models.Print", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("Orderlines");
                });

            modelBuilder.Entity("Models.Store", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
